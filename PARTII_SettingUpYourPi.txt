#PART II: SETTING UP YOUR PI
######################
#Install OS (Raspbian)
######################

# You will need to get into your Raspberry pi to install the OS and enable ssh before you can beging using it with say your Mac
Hook up a monitor and keyboard to your Pi, and download raspbian to the SD card
	https://www.raspberrypi.org/downloads/raspbian/

# As of the November 2016 release, Raspbian has the SSH server disabled by 
# You'll have to enable it so we can ssh into the pi from your computer
	$ sudo raspi-config
# Select Advanced Options, SSH, select Yes, Ok, now Finish
Install any updates now (could take up to 2 hours)
	$ sudo apt-get update
	$ sudo apt-get upgrade
	$ shutdown -h now

############
# GET PI IP  
############
	#To get into your Pi you need to find it's internal ip address
		$ sudo apt-get install nmap
	#Find your internal (not external) router address
		$ ifconfig
	# In all the output junk you'll see you're internal router address 192.168.1.XXX (mine today is 192.168.1.216)
	# Now look for the raspberry pi (https://braindrivendevelopment.com/2014/12/02/using-nmap-to-find-a-raspberry-pi-within-a-network/)
	# The following command scans between addresses around your computer's ip (192.168.1.0)
	# You will have to plug into an ethernet cable
		$ nmap -sn 192.168.43.47/24 
	# One line will have the ip address for your raspberry pi computer via ethernet cable
	# Nmap scan report for raspberrypi.fios-router.home (192.168.1.134)
	# Boom! You can now get in there

#############
# SSH into PI 
#############	
#now get ssh in, the default password on the raspberry pi is "raspberry"
	$ ssh pi@192.168.1.134

# say "yes"
	kathryns-Air-2:kathrynthegreat.github.io kathrynvasilaky$ ssh pi@192.168.1.220
	The authenticity of host '192.168.1.220 (192.168.1.220)' can't be established.
	ECDSA key fingerprint is SHA256:cSQ/iFgSbBm/oplRV9lvkYVUCFNXb5gT+fxEhv14/Jc.
	Are you sure you want to continue connecting (yes/no)? yes

#enter your raspberry pi password
	Warning: Permanently added '192.168.1.220' (ECDSA) to the list of known hosts. "raspberry" is the defaul
	pi@192.168.1.220's password: raspberry

#now you're in. You should see the following at command line
	pi@raspberrypi:~ $ 

#############
# Enable Wifi 
#############	
# You need to now store the user/psswd on your pi, so it can pick up the wifi next time without an ethernet
# We're going to edit the wifi protected access conf file: wpa_supplicant.conf (https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md)
# Copy paste your network and password into the file (http://weworkweplay.com/play/automatically-connect-a-raspberry-pi-to-a-wifi-network/)

	pi@raspberrypi:~ $ sudo nano /etc/network/interfaces

		auto wlan0

		allow-hotplug wlan0
		iface wlan0 inet dhcp
		wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
		iface default inet dhcp

	pi@raspberrypi:~ $ sudo nano /etc/wpa_supplicant/wpa_supplicant.conf


		country=US
		ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
		update_config=1
		network={
		        ssid="networkname"
		        psk="password"
		}

# Now press Ctrl+X, then Y, then Enter

# At this point, wpa-supplicant will normally notice a change has occurred within a few seconds, and it will try and connect to the # network. If it does not, restart the interface with sudo wpa_cli reconfigure and then reboot.
	pi@raspberrypi:~ $ sudo wpa_cli reconfigure
# You can verify whether it has successfully connected using ifconfig wlan0. If the inet addr field has an address beside it, the 
# Raspberry Pi has connected to the network. If not, check that your password and ESSID are correct.
# Note that the Pi will have two IP addresses assigned to it now; one via the ethernet and one via the wlan0

	pi@raspberrypi:~ $ ifconfig wlan0 #should pull up your wlan0 ip address
#You might have to run these commands for the change to take effect	
	pi@raspberrypi:~ $ sudo ifdown wlan0
	pi@raspberrypi:~ $ sudo ifup wlan0
	pi@raspberrypi:~ $ reboot
	pi@raspberrypi:~ $ exit
# Hit 1 and then your password (default is "raspberry")


# You're ready to remove the ethernet cable and find the pi's IP address via the wlan0
#Pip install fing. It find's devices' IP addresses
	$ pip install fing 
	$ sudo fing -r1
			18:16:01 > Discovery progress 25%
			18:16:01 > Host is up:   192.168.1.221
           	HW Address:   B8:27:EB:4B:38:22 (Raspberry Pi Foundation)
           	Hostname:     raspberrypi
# The new ip address should pop up if it didn't with "sudo ifconfig wlan0" inside the pi
# Sign back in but now using the wlan0 (https://www.raspberrypi.org/documentation/remote-access/ssh/README.md)
	#192.168.1.86 (Portland)
	$ ssh pi@192.168.1.221  
########################
# Testing Water Readings
########################

# Getting Adafruit readings. You'll need some package that reads values from your Pi.
# We're using Adafruit MCP3008 Python library (Controlmypi will soon be obsolete) (https://learn.adafruit.com/raspberry-pi-analog-to-digital-converters/mcp3008)

	pi@raspberrypi:~ $ sudo apt-get update
	pi@raspberrypi:~ $ sudo apt-get install build-essential python-dev python-smbus git
	pi@raspberrypi:~ $ cd ~
	pi@raspberrypi:~ $ git clone https://github.com/adafruit/Adafruit_Python_MCP3008.git
	pi@raspberrypi:~ $ cd Adafruit_Python_MCP3008
	pi@raspberrypi:~ $ sudo python setup.py install

# Test the readings out. Dink the sensor in water.
	pi@raspberrypi:~ $ cd /Adafruit_Python_MCP3008/examples
	pi@raspberrypi:~/Adafruit_Python_MCP3008/examples $ nano simpletest.py

# Comment out the software part, keep the Hardware SPI section
# Hardware SPI configuration (taken from pi@raspberrypi:~/Adafruit_Python_MCP3008/examples/simpletest.py)
	SPI_PORT   = 0
	SPI_DEVICE = 1
	mcp = Adafruit_MCP3008.MCP3008(spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE))
	#test the water level out
	mcp.read_adc(5)

# ctrl+o to exit, enter, ctrl+x to exit
	pi@raspberrypi:~/Adafruit_Python_MCP3008/examples $ sudo python simpletest.py 
		Reading MCP3008 values, press Ctrl-C to quit...
		|    0 |    1 |    2 |    3 |    4 |    5 |    6 |    7 |
		---------------------------------------------------------
		|   19 |    9 |    8 |    7 |    6 |  683 |    9 |   18 |
		|   23 |   11 |    9 |    9 |    7 |  684 |   11 |   20 |
		|   25 |   12 |   10 |    9 |    8 |  683 |   12 |   21 |

########################
# Meaning of the Reading?
########################

So what do these numbers mean? The analog readings from the Octopus sensor are from 0-950 according to: http://www.electronicoscaldas.com/datasheet/OBSoil-01_ElecFreaks.pdf. A function reads the voltage from the pin (between 0v and 5v), and outputs an integer value between 0 and 1023 scaled to the voltage. So, if there was 1v on the pin, mcp.read_adc() would return a value of 204, and if there was 5v to the pin, mcp.read_adc() would return a value of 1023.

If you assume that a 5V reading from the sensor is 100% soil saturation, 0V is 0% moisture content, and that the sensor's voltage varies linearly with the soil moisture, then to get soil moisture content you'd just take the reading and divide it by 1023.

But I can't seem to find documentation from the sensor manufacturer that that relationship is necessarily linear. 
